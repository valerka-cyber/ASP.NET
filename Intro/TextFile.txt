Введение в ASP.Net Core
ASP - Active Server Pages - технолония создания веб-приложений, изначально 
ориентрированные на серверную активность. На сегодня это универсальная технология
в т.ч. с поддержкой серверных страниц (Razor Pages)

Виды веб-приложений
статический  - на сервере хранятся HTML страницы, которые возвращаются на соотв. запросы

с серверной активностью(ASP, JSP, PHP) - со стороны сервера есть запускаемый модуль, 
он анализирует запрос (клиента) и может собрать страницы на лету, использую условные
и циклические конструкции. В итоге клиент получает HTML? но он динамический, 
то есть меняется от параметра запроса (например, фильтр поиска

)с клиенткой активностью (SPA - single page app, web-api) - данные на сервер отправляются в фоновом режиме, 
при получении ответа обновляется части страницы. Сервер при этом 
передает "сырые данные" (не HTML), обычно в JSON \ XML формате.

Как выполняется серверная активность?
Браузер  Server(IIS)        .Net
Запрос --> Разбор -------- DLL

MVC (MODEL VIEW CONTROLLER) - паттерн (шаблон) архитектуры, согласно которому
в структуре проекта можна выделить 3 части
модель - поставщик данных,  "слой" в котором данные из хранилища , 
представляются и изклекаются 
к другим частям приложения в виде объекта
- view (представление) - визуальная часть, обычный интерфейс пользователя.
в случае web-api представление называют и сырые данные, точнее, их упаковку.
-controller - модуль взаимодействий с входом (запросами), определяюзий какую
модель запросить и в какое представление передать

SOLID ==DE = DI
 Суть инверсии 0 дерегирование задачи создания объктов специальному модулю
 Инверсия - объекты создаем не "мы" в точке необходимости, а запрашиваем их в "контейнере"
 Зависимость - "заявка" на то, что в нашем объекте понадобится другой
 объект
 Инъекция - процедура внедрения зависимости, передача данных об объекте , который заявлен как зависимость.
 Слово - синоним Resolution

 Процесс инверсии
 0. Создаем службы - описываем классы, котрые будут внедряться
 1. Регистрация источников (служб, сервисов) - сущности, котоорые будут
 внедряться в другие объекты 
 2. Ограничения жизненного цикла источников (при следующем обращении)
 брать новый или ранее созданный 
 3.Описание зависимостей
 4. Внедрение (решение) зависимотей == построение объекта

 Без инверсии												С инверсией
 class  The Class {											class TheClass{		
 prop = new...//сами создаем							[Dependency] prop;
 }																		...}

 Способы внедрения:
 -через конструктор класса
 -свойства с атрибутом
 -через зпараметр метода

 Пример: есть рекомендации (по безопасности)  использовать один генератор
 случайный чисел во всем проекте

 Cоздаем папку  Service
 в нем создаем класс  RandomService
  В классе Program (cORE6)
  добавление регистрации службы
  services.AddSingleton<RandomService>

  - открываем класс контролера
  добавляем поле private readonly RandomService _randomService;
  public HomeController(.... RandomService randomService)
  {сохраняем переданную ссылку (инъекцию)
  _randomService = randomService
  }

  Используем схемы sOlid (Open/Close principle)
  Если нужно вносить изменения в работу службы, то приходится менять объект
  ОСР рекомендует не изменять, а расширять. Это дает возможность "отката" - легкого к предыдущей 
  версии.
   Такая возможность реализуется через интерфейс. 
   В контейнере регистрируется интерфейсы и их реализации 
   В точках инъекции заявляется зависимость от интерфейсов, а контейнер в эти точки подставляет 
   реализации.

   Пример: служба хегирования

   В службах создаем интерфейс IHasher 
   - там же - реализацию
   - регистрируем "сопоставлением" интерфейса и реализации
   в контроллере создаем инъекцию типа IHasher

   AddSingleton - максимальное время жизни (один)

   Слой согласования БД (или другого источника данных)
   и слоя логики (BLL - Busines Logic Layer)
   Если по простому, то это перевод сущностей БД (таблиц)
   в сущности языка (объектов/колекций)
   В АСП наиболее популярен EntityFrameworkCore
   

    на примере создания таблицы пользователей
    1. Структура
    Создаем папки
    DAL
    Context
    Entities

    2. Сущности классы,отражающие структуру данных таблиц в папке Entities
    создаем класс User

    3.  В папке Context описываем сам контекст данных и его классы конфигурации
    IntroContext
    UsersConfiguration

    4. Строка подключения Т.К. База дыннх создается автоматически, мы создаем строку подключеия
    к несуществующей БД либо пустую

    Использование контекста
    Контекст регистрируется как служба, поэтому внедряется
    как зависимость (через конструктор)
